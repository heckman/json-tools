#!/usr/bin/env zsh
# Copyright 2024 Erik Ben Heckman <erik@heckman.ca>
# https://git.heckman.ca/json-tools   SPDX-License-Identifier: MIT


#  json-combine  v0.2


# Combine json files

# Usage: json-combine <file.json> ...
#
# Wraps incoming json in an object named for the filename that contains it
# (its basename, minusing any '.json' extension) and then combines them.
# Subsequent objects will overwrite previous ones of the same name,
# unless -r or --recursive is specified, in which case the objects
# are merged recursively.
#
#
# Requires `jq` which does the heavy lifting
#
# For examples of recursive merging see:
# https://jqlang.github.io/jq/manual/#multiplication-division-modulo
#

help() { >&2 awk '/^ *[^#]/{exit}NR>1{print substr($0,2)}' $ZSH_ARGZERO; }
version() { >&2 awk '$0~'"${(qqq)ZSH_ARGZERO:A:t}"'{print substr($0,2);exit}' $ZSH_ARGZERO; }

# default is to merge non-recursively
operator='+'

while [[ ${1:-} = -* ]]
do case ${1:-} in
	-h|--help) help; exit ;;
	-v|--version) version; exit ;;
	-r|--recurse|--recursive) operator='*'; shift ;;
	--) shift; break ;;
	-*) break ;; # unrecognized options assumed to be positional arguments
esac
done

jq '
	{
		(
			$ARGS.named.key?
			// (
				input_filename
				|
				capture(
					"(.*/)?(?<basename>.*?)(\\.json)?$"
				).basename
			)
		): .
	}
' "$@" | jq --null-input '
	reduce inputs as $item (
		{}; . '"$operator"' $item
	)
'
