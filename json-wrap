#!/usr/bin/env zsh
# Copyright 2024 Erik Ben Heckman <erik@heckman.ca>
# SPDX-License-Identifier: MIT


# json-wrap v0.2


# wrap json in a top-level object

# usage: json-wrap [-k <name>|--key <name>] [<file.json> ... ]
#
# Reads Json from files, or stdin no files are specified,
# and wraps each in an object; it's key specified by -k or --key.
#
# If -k or --key is not specified, the key is generated
# from the basename of the file, excluding any '.json' extension.
#
# The objects are printed successively to stdout.
#
# Note that if objects are being read by stdin their
# automatically-generated keys will be either "<stdin>"
# or a number representing a file descriptor
#
#
# Requires `jq` which does the heavy lifting.
#

help() { >&2 awk '/^ *[^#]/{exit}NR>1{print substr($0,2)}' $ZSH_ARGZERO; }
version() { >&2 awk '$0~'"${(qqq)ZSH_ARGZERO:A:t}"'{print substr($0,2);exit}' $ZSH_ARGZERO; }

opts=()
while [[ ${1:-} = -* ]]
do case ${1:-} in
	-h|--help|) help; exit ;;
	-v|--version) version; exit ;;
	-k|--key)
		shift
		opts=(--arg key $1)
		shift 2>/dev/null || {
			echo 'Error: missing key. Use -h or --help for usage.'>&2
			exit 1
		} ;;
	--) shift; break ;;
	-*) break ;; # unrecognized options assumed to be positional arguments
esac
done

jq "${opts[@]}" '
	{
		(
			$ARGS.named.key?
			// (
				input_filename
				|
				capture(
					"(.*/)?(?<basename>.*?)(\\.json)?$"
				).basename
			)
		): .
	}
' "$@"
